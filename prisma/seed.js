// prisma/seed.js
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';


const prisma = new PrismaClient();


// Fun√ß√£o para gerar um n√∫mero aleat√≥rio em um intervalo
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}


// Fun√ß√£o para pegar um elemento aleat√≥rio de um array
function getRandomElement(arr) {
  if (!arr || arr.length === 0) return null;
  return arr[Math.floor(Math.random() * arr.length)];
}


async function main() {
  console.log(`üßπ Limpando banco de dados...`);
  // Ordem de dele√ß√£o √© importante por causa das FKs
  await prisma.registroAtividade.deleteMany({});
  await prisma.dica.deleteMany({});
  await prisma.acaoSustentavel.deleteMany({});
  await prisma.usuario.deleteMany({});


  console.log(`üå± Iniciando seeding...`);


  // --- Criar Usu√°rios (Exemplo: 10 usu√°rios) ---
  const usuariosCriados = [];
  const nomesBase = ["Ana", "Bruno", "Carla", "Daniel", "Eduarda", "F√°bio", "Gabriela", "Hugo", "Isabela", "Jo√£o"];
  console.log('üë§ Criando usu√°rios...');
  for (let i = 0; i < 10; i++) {
    const nomeUnico = `${nomesBase[i % nomesBase.length]} Silva ${i}`;
    const emailUnico = `usuario${i + 1}@example.com`;
    const senhaHash = await bcrypt.hash(`senha${i + 1}XYZ`, 10);
    const usuario = await prisma.usuario.create({
      data: {
        nome: nomeUnico,
        email: emailUnico,
        senha_hash: senhaHash,
        idRegistro: `USERREG${String(i + 1).padStart(3, '0')}`,
        pontuacao_total: getRandomInt(0, 500),
        nivel: getRandomInt(1, 10),
      },
    });
    usuariosCriados.push(usuario);
    // Para chegar a 90, voc√™ precisaria de um loop maior ou dados mais variados
  }
  console.log(`${usuariosCriados.length} usu√°rios criados.`);


  // --- Criar A√ß√µes Sustent√°veis (Exemplo: 20 a√ß√µes) ---
  const acoesCriadas = [];
  const nomesAcoes = [
    "Reciclar Pl√°stico", "Reciclar Vidro", "Compostagem Dom√©stica", "Usar Transporte P√∫blico",
    "Andar de Bicicleta", "Reduzir Consumo de Carne", "Plantar uma √Årvore", "Economizar Energia em Casa",
    "Desligar Luzes N√£o Usadas", "Usar Sacola Retorn√°vel", "Evitar Desperd√≠cio de Alimentos",
    "Coleta Seletiva", "Doar Roupas Usadas", "Reduzir Uso de Pl√°stico Descart√°vel",
    "Consumir Produtos Locais", "Participar de Limpeza Comunit√°ria", "Educar Sobre Sustentabilidade",
    "Consertar em Vez de Descartar", "Utilizar Garrafa de √Ågua Reutiliz√°vel", "Optar por Produtos Ecol√≥gicos"
  ];
  const categoriasAcoes = ["Reciclagem", "Mobilidade", "Alimenta√ß√£o", "Biodiversidade", "Energia", "Consumo Consciente", "Comunidade", "Educa√ß√£o"];
  console.log('üåø Criando a√ß√µes sustent√°veis...');
  for (let i = 0; i < 20; i++) { // Para 90, aumente o loop e a variedade de nomes
    const nomeAcao = i < nomesAcoes.length ? nomesAcoes[i] : `A√ß√£o Sustent√°vel Extra ${i - nomesAcoes.length + 1}`;
    const acao = await prisma.acaoSustentavel.create({
      data: {
        nome: nomeAcao,
        descricao: `Descri√ß√£o detalhada para ${nomeAcao}.`,
        pontos: getRandomInt(5, 30),
        categoria: getRandomElement(categoriasAcoes),
      },
    });
    acoesCriadas.push(acao);
  }
  console.log(`${acoesCriadas.length} a√ß√µes sustent√°veis criadas.`);


  // --- Criar Dicas (Exemplo: 30 dicas) ---
  const dicasCriadas = [];
  const titulosDicas = [
    "5 Maneiras de Reduzir sua Pegada de Carbono", "Guia R√°pido para Compostagem", "Benef√≠cios de uma Dieta Plant-Based",
    "Como Montar uma Horta Urbana", "Dicas para Economizar √Ågua em Casa", "Reciclagem Criativa: Ideias para Reutilizar",
    "A Import√¢ncia das Abelhas para o Ecossistema", "Descarte Correto de Eletr√¥nicos", "Moda Sustent√°vel: O que Voc√™ Precisa Saber",
    "Como Fazer Produtos de Limpeza Ecol√≥gicos", "Turismo Sustent√°vel: Viaje com Consci√™ncia", "Energias Renov√°veis para sua Casa",
    "Minimalismo e Sustentabilidade", "Impacto do Pl√°stico nos Oceanos", "Crie um Jardim para Polinizadores",
    "Transporte Alternativo nas Cidades", "Alimenta√ß√£o Org√¢nica: Vantagens", "Como Reduzir o Lixo Pl√°stico",
    "A√ß√µes Individuais pelo Clima", "Constru√ß√µes Sustent√°veis", "Import√¢ncia da √Ågua de Reuso",
    "Log√≠stica Reversa: Entenda", "Desafios do Saneamento B√°sico", "Consumo Consciente de Tecnologia",
    "Pegada H√≠drica dos Alimentos", "Upcycling: Transforme o Velho em Novo", "Mobilidade Ativa e Sa√∫de",
    "O Papel das Florestas Urbanas", "Impacto Ambiental da Ind√∫stria da Moda", "Oceanos Livres de Pl√°stico: Como Ajudar"
  ];
  const categoriasDicas = ["Geral", "Casa", "Alimenta√ß√£o", "Transporte", "Reciclagem", "Energia", "√Ågua", "Conscientiza√ß√£o"];
  console.log('üí° Criando dicas...');
  for (let i = 0; i < 30; i++) { // Para 90, aumente o loop e a variedade de t√≠tulos
    const tituloDica = i < titulosDicas.length ? titulosDicas[i] : `Dica Extra sobre Sustentabilidade ${i - titulosDicas.length + 1}`;
    const dica = await prisma.dica.create({
      data: {
        titulo: tituloDica,
        conteudo: `Conte√∫do elaborado sobre ${tituloDica}, explorando diversos aspectos e fornecendo informa√ß√µes pr√°ticas.`,
        categoria_dica: getRandomElement(categoriasDicas),
      },
    });
    dicasCriadas.push(dica);
  }
  console.log(`${dicasCriadas.length} dicas criadas.`);


  // --- Criar Registros de Atividade (Exemplo: 50 registros) ---
  // Conectando usu√°rios aleat√≥rios com a√ß√µes aleat√≥rias
  const registrosCriados = [];
  const observacoesExemplo = [
    "Feito com sucesso!", "Completei o desafio.", "Muito bom para o planeta.",
    "Aprendi bastante.", "Vou fazer mais vezes.", "Recomendo a todos.",
    "Pequena a√ß√£o, grande impacto.", "Me senti √≥timo fazendo isso."
  ];
  console.log('üìù Criando registros de atividade...');
  if (usuariosCriados.length > 0 && acoesCriadas.length > 0) {
    for (let i = 0; i < 50; i++) { // Para 90, aumente o loop
      const usuarioAleatorio = getRandomElement(usuariosCriados);
      const acaoAleatoria = getRandomElement(acoesCriadas);
      const registro = await prisma.registroAtividade.create({
        data: {
          usuario_id: usuarioAleatorio.id,
          acao_id: acaoAleatoria.id,
          observacao: getRandomElement(observacoesExemplo) + ` (Registro ${i+1})`,
          data_hora: new Date(Date.now() - getRandomInt(0, 30) * 24 * 60 * 60 * 1000), // Data nos √∫ltimos 30 dias
        },
      });
      registrosCriados.push(registro);
    }
  }
  console.log(`${registrosCriados.length} registros de atividade criados.`);


  console.log(`‚úÖ Seeding finalizado com sucesso!`);
}


main()
  .catch(async (e) => {
    console.error("‚ùå Erro durante o processo de seeding:", e);
    await prisma.$disconnect();
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
